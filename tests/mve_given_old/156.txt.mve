; mutable: loop
; env: ()
; env: ()
; env: ()
; env: ()
; env: ()
; env: ()
; env*: (f cc)
; env: (f cc)
; env: (f cc)
; regular: f
; env: (f cc)
; env*: (f k cc x)
; env: (f k cc x)
; env: (f k cc x)
; regular: cc
; env: (f k cc x)
; regular: x
; env: (f cc)
; regular: cc
; env: ()
; env*: (break k14)
; env: (break k14)
; env: (break k14)
; env*: (break loop k14 k15)
; env: (break loop k14 k15)
; env: (break loop k14 k15)
; env*: (break loop k16 k14 k15)
; env: (break loop k16 k14 k15)
; env: (break loop k16 k14 k15)
; env: (break loop k16 k14 k15)
; env: (break loop k16 k14 k15)
; env*: (f cc break loop k16 k14 k15)
; env: (f cc break loop k16 k14 k15)
; env: (f cc break loop k16 k14 k15)
; regular: f
; env: (f cc break loop k16 k14 k15)
; env*: (f k x cc break loop k16 k14 k15)
; env: (f k x cc break loop k16 k14 k15)
; env: (f k x cc break loop k16 k14 k15)
; regular: cc
; env: (f k x cc break loop k16 k14 k15)
; regular: x
; env: (f cc break loop k16 k14 k15)
; regular: cc
; env: (break loop k16 k14 k15)
; env*: (break loop continue k16 k14 k15 k17)
; env: (break loop continue k16 k14 k15 k17)
; env: (break loop continue k16 k14 k15 k17)
; env*: (break loop continue k16 k14 k15 k18 k17)
; env: (break loop continue k16 k14 k15 k18 k17)
; env: (break loop continue k16 k14 k15 k18 k17)
; env: (break loop continue k16 k14 k15 k18 k17)
; env: (break loop continue k16 k14 k15 k18 k17)
; regular: k18
; env: (break loop continue k16 k14 k15 k17)
; regular: k17
; env: (break loop k16 k14 k15)
; env*: (break loop k16 k14 k15 rv19)
; env: (break loop k16 k14 k15 rv19)
; env: (break loop k16 k14 k15 rv19)
; mutable: loop
; env: (break loop k16 k14 k15 rv19)
; regular: k16
; env: (break loop k16 k14 k15)
; env: (break loop k16 k14 k15)
; regular: k16
; env: (break loop k16 k14 k15)
; env: (break loop k14 k15)
; env: (break loop k14 k15)
; mutable: loop
; env: (break loop k14 k15)
; env*: (break loop k14 k15 rv20)
; env: (break loop k14 k15 rv20)
; env: (break loop k14 k15 rv20)
; regular: k15
; env: (break loop k14 k15 rv20)
; env: (break k14)
; env: (break k14)
; regular: k14
; env: ()
; env: ()
; global: $halt
(program
 (define break (void))
 (define return (void))
 (define continue (void))
 (define $current-handler (void))
 ((lambda (f cc) (f (lambda (x k) (cc x)) cc))
  (lambda (break k14)
    ((lambda (loop k15)
       (set-then!
        loop
        (make-cell loop)
        (set-cell!
         loop
         (lambda (k16)
           (if #f
             ((lambda (f cc) (f (lambda (x k) (cc x)) cc))
              (lambda (continue k17)
                ((lambda (k18) ((cps py-print) "here" k18)) k17))
              (lambda (rv19) ((get-cell loop) k16)))
             (k16 (void))))
         ((get-cell loop) (lambda (rv20) (k15 (void)))))))
     (void)
     k14))
  $halt))

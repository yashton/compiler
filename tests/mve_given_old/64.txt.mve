; mutable: g$a
; mutable: loop
; env: ()
; env: ()
; env: ()
; env: ()
; env: ()
; env: ()
; env: ()
; env*: (f cc)
; env: (f cc)
; env: (f cc)
; regular: f
; env: (f cc)
; env*: (f k cc x)
; env: (f k cc x)
; env: (f k cc x)
; regular: cc
; env: (f k cc x)
; regular: x
; env: (f cc)
; regular: cc
; env: ()
; env*: (k14 break)
; env: (k14 break)
; env: (k14 break)
; env*: (loop break k14 k15)
; env: (loop break k14 k15)
; env: (loop break k14 k15)
; env*: (loop k16 break k14 k15)
; env: (loop k16 break k14 k15)
; env: (loop k16 break k14 k15)
; env: (loop k16 break k14 k15)
; env: (loop k16 break k14 k15)
; env*: (f cc loop k16 break k14 k15)
; env: (f cc loop k16 break k14 k15)
; env: (f cc loop k16 break k14 k15)
; regular: f
; env: (f cc loop k16 break k14 k15)
; env*: (f k x cc loop k16 break k14 k15)
; env: (f k x cc loop k16 break k14 k15)
; env: (f k x cc loop k16 break k14 k15)
; regular: cc
; env: (f k x cc loop k16 break k14 k15)
; regular: x
; env: (f cc loop k16 break k14 k15)
; regular: cc
; env: (loop k16 break k14 k15)
; env*: (loop k16 break k14 k15 continue k17)
; env: (loop k16 break k14 k15 continue k17)
; env: (loop k16 break k14 k15 continue k17)
; env*: (loop k16 break k14 k15 k18 continue k17)
; env: (loop k16 break k14 k15 k18 continue k17)
; env: (loop k16 break k14 k15 k18 continue k17)
; env: (loop k16 break k14 k15 k18 continue k17)
; env: (loop k16 break k14 k15 k18 continue k17)
; regular: k18
; env: (loop k16 break k14 k15 k18 continue k17)
; env: (loop k16 break k14 k15 continue k17)
; regular: k17
; env: (loop k16 break k14 k15)
; env*: (loop k16 break k14 k15 rv19)
; env: (loop k16 break k14 k15 rv19)
; env: (loop k16 break k14 k15 rv19)
; mutable: loop
; env: (loop k16 break k14 k15 rv19)
; regular: k16
; env: (loop k16 break k14 k15)
; env: (loop k16 break k14 k15)
; regular: k16
; env: (loop k16 break k14 k15)
; env: (loop break k14 k15)
; env: (loop break k14 k15)
; mutable: loop
; env: (loop break k14 k15)
; env*: (loop break k14 k15 rv20)
; env: (loop break k14 k15 rv20)
; env: (loop break k14 k15 rv20)
; regular: k15
; env: (loop break k14 k15 rv20)
; env: (k14 break)
; env: (k14 break)
; regular: k14
; env: ()
; env: ()
; global: $halt
(program
 (define break (void))
 (define return (void))
 (define continue (void))
 (define $current-handler (void))
 (define g$a (void))
 ((lambda (f cc) (f (lambda (x k) (cc x)) cc))
  (lambda (break k14)
    ((lambda (loop k15)
       (set-then!
        loop
        (make-cell loop)
        (set-cell!
         loop
         (lambda (k16)
           (if #t
             ((lambda (f cc) (f (lambda (x k) (cc x)) cc))
              (lambda (continue k17)
                ((lambda (k18) (set-then! g$a 1 (k18 (void)))) k17))
              (lambda (rv19) ((get-cell loop) k16)))
             (k16 (void))))
         ((get-cell loop) (lambda (rv20) (k15 (void)))))))
     (void)
     k14))
  $halt))

; mutable: count
; mutable: ch
; mutable: g$two_e
; env: ()
; env: ()
; env: ()
; env: ()
; env: ()
; env: ()
; env: ()
; env*: (str k14)
; env: (str k14)
; env: (str k14)
; env*: (str f k14 cc)
; env: (str f k14 cc)
; env: (str f k14 cc)
; regular: f
; env: (str f k14 cc)
; env*: (str f k k14 cc x)
; env: (str f k k14 cc x)
; env: (str f k k14 cc x)
; regular: cc
; env: (str f k k14 cc x)
; regular: x
; env: (str f k14 cc)
; regular: cc
; env: (str k14)
; env*: (str k14 k15 return)
; env: (str k14 k15 return)
; env: (str k14 k15 return)
; env*: (count str ch k14 k16 k15 return)
; env: (count str ch k14 k16 k15 return)
; env: (count str ch k14 k16 k15 return)
; env: (count str ch k14 k16 k15 return)
; env: (count str ch k14 k16 k15 return)
; env*: (count str f cc ch k14 k16 k15 return)
; env: (count str f cc ch k14 k16 k15 return)
; env: (count str f cc ch k14 k16 k15 return)
; regular: f
; env: (count str f cc ch k14 k16 k15 return)
; env*: (count str f k cc ch k14 x k16 k15 return)
; env: (count str f k cc ch k14 x k16 k15 return)
; env: (count str f k cc ch k14 x k16 k15 return)
; regular: cc
; env: (count str f k cc ch k14 x k16 k15 return)
; regular: x
; env: (count str f cc ch k14 k16 k15 return)
; regular: cc
; env: (count str ch k14 k16 k15 return)
; env*: (count str ch k14 k16 k15 return break k17)
; env: (count str ch k14 k16 k15 return break k17)
; env: (count str ch k14 k16 k15 return break k17)
; env*: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 k18)
; env: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 k18)
; env: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 k18)
; env*: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 k19 k18)
; env: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 k19 k18)
; env: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 k19 k18)
; env: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 k19 k18)
; regular: $seq14
; env: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 k19 k18)
; env*: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 rv21 k19 k18)
; env: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 rv21 k19 k18)
; env: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 rv21 k19 k18)
; regular: rv21
; env: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 rv21 k19 k18)
; env: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 rv21 k19 k18)
; env: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 rv21 k19 k18)
; global: for-set-k
; env: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 rv21 k19 k18)
; regular: $seq14
; env: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 rv21 k19 k18)
; regular: $loop15
; env: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 rv21 k19 k18)
; regular: k19
; env: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 rv21 k19 k18)
; env: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 rv21 k19 k18)
; env: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 rv21 k19 k18)
; regular: $seq14
; env: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 rv21 k19 k18)
; env*: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 rv21 k19 k18 rv22)
; env: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 rv21 k19 k18 rv22)
; env: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 rv21 k19 k18 rv22)
; regular: rv22
; env: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 rv21 k19 k18 rv22)
; env: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 rv21 k19 k18 rv22)
; env: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 rv21 k19 k18 rv22)
; global: for-tuple-k
; env: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 rv21 k19 k18 rv22)
; regular: $seq14
; env: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 rv21 k19 k18 rv22)
; regular: $loop15
; env: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 rv21 k19 k18 rv22)
; regular: k19
; env: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 rv21 k19 k18 rv22)
; env: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 rv21 k19 k18 rv22)
; env: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 rv21 k19 k18 rv22)
; regular: $seq14
; env: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 rv21 k19 k18 rv22)
; env*: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 rv21 k19 k18 rv23 rv22)
; env: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 rv21 k19 k18 rv23 rv22)
; env: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 rv21 k19 k18 rv23 rv22)
; regular: rv23
; env: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 rv21 k19 k18 rv23 rv22)
; env: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 rv21 k19 k18 rv23 rv22)
; env: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 rv21 k19 k18 rv23 rv22)
; global: for-py-list-k
; env: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 rv21 k19 k18 rv23 rv22)
; regular: $seq14
; env: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 rv21 k19 k18 rv23 rv22)
; regular: $loop15
; env: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 rv21 k19 k18 rv23 rv22)
; regular: k19
; env: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 rv21 k19 k18 rv23 rv22)
; env: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 rv21 k19 k18 rv23 rv22)
; env: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 rv21 k19 k18 rv23 rv22)
; regular: $seq14
; env: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 rv21 k19 k18 rv23 rv22)
; env*: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 rv21 k19 k18 rv23 rv22 rv24)
; env: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 rv21 k19 k18 rv23 rv22 rv24)
; env: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 rv21 k19 k18 rv23 rv22 rv24)
; regular: rv24
; env: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 rv21 k19 k18 rv23 rv22 rv24)
; env: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 rv21 k19 k18 rv23 rv22 rv24)
; env: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 rv21 k19 k18 rv23 rv22 rv24)
; global: for-dict-k
; env: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 rv21 k19 k18 rv23 rv22 rv24)
; regular: $seq14
; env: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 rv21 k19 k18 rv23 rv22 rv24)
; regular: $loop15
; env: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 rv21 k19 k18 rv23 rv22 rv24)
; regular: k19
; env: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 rv21 k19 k18 rv23 rv22 rv24)
; env: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 rv21 k19 k18 rv23 rv22 rv24)
; regular: k19
; env: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 rv21 k19 k18 rv23 rv22 rv24)
; env: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 k18)
; env*: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 k18 rv20)
; env: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 k18 rv20)
; env: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 k18 rv20)
; regular: k18
; env: (count str ch k14 k16 k15 return $seq14 $loop15 break k17 k18 rv20)
; env: (count str ch k14 k16 k15 return break k17)
; regular: str
; env: (count str ch k14 k16 k15 return break k17)
; env*: (count str ch k14 k16 k15 return break k17 i14 k25)
; env: (count str ch k14 k16 k15 return break k17 i14 k25)
; env: (count str ch k14 k16 k15 return break k17 i14 k25)
; env*: (count str f cc ch k14 k16 k15 return break k17 i14 k25)
; env: (count str f cc ch k14 k16 k15 return break k17 i14 k25)
; env: (count str f cc ch k14 k16 k15 return break k17 i14 k25)
; regular: f
; env: (count str f cc ch k14 k16 k15 return break k17 i14 k25)
; env*: (count str f k cc ch k14 x k16 k15 return break k17 i14 k25)
; env: (count str f k cc ch k14 x k16 k15 return break k17 i14 k25)
; env: (count str f k cc ch k14 x k16 k15 return break k17 i14 k25)
; regular: cc
; env: (count str f k cc ch k14 x k16 k15 return break k17 i14 k25)
; regular: x
; env: (count str f cc ch k14 k16 k15 return break k17 i14 k25)
; regular: cc
; env: (count str ch k14 k16 k15 return break k17 i14 k25)
; env*: (count str ch k14 k16 k15 return break k17 i14 continue k26 k25)
; env: (count str ch k14 k16 k15 return break k17 i14 continue k26 k25)
; env: (count str ch k14 k16 k15 return break k17 i14 continue k26 k25)
; regular: i14
; env: (count str ch k14 k16 k15 return break k17 i14 continue k26 k25)
; env: (count str ch k14 k16 k15 return break k17 i14 continue k26 k25)
; env*: (count str ch k14 k16 k15 return break k17 i14 k27 continue k26 k25)
; env: (count str ch k14 k16 k15 return break k17 i14 k27 continue k26 k25)
; env: (count str ch k14 k16 k15 return break k17 i14 k27 continue k26 k25)
; env: (count str ch k14 k16 k15 return break k17 i14 k27 continue k26 k25)
; mutable: ch
; env: (count str ch k14 k16 k15 return break k17 i14 k27 continue k26 k25)
; env: (count str ch k14 k16 k15 return break k17 i14 k27 continue k26 k25)
; env*: (count str ch k14 k16 k15 return break k17 i14 k27 continue k26 k25 rv28)
; env: (count str ch k14 k16 k15 return break k17 i14 k27 continue k26 k25 rv28)
; env: (count str ch k14 k16 k15 return break k17 i14 k27 continue k26 k25 rv28)
; regular: rv28
; env: (count str ch k14 k16 k15 return break k17 i14 k27 continue k26 k25 rv28)
; env: (count str ch k14 k16 k15 return break k17 i14 k27 continue k26 k25 rv28)
; env*: (count str ch k14 k16 k15 return break k17 i14 k27 continue k26 k25 k29 rv28)
; env: (count str ch k14 k16 k15 return break k17 i14 k27 continue k26 k25 k29 rv28)
; env: (count str ch k14 k16 k15 return break k17 i14 k27 continue k26 k25 k29 rv28)
; env: (count str ch k14 k16 k15 return break k17 i14 k27 continue k26 k25 k29 rv28)
; mutable: count
; env: (count str ch k14 k16 k15 return break k17 i14 k27 continue k26 k25 k29 rv28)
; env: (count str ch k14 k16 k15 return break k17 i14 k27 continue k26 k25 k29 rv28)
; env*: (count str ch k14 k16 k15 return break k17 i14 k27 continue k26 k25 rv30 k29 rv28)
; env: (count str ch k14 k16 k15 return break k17 i14 k27 continue k26 k25 rv30 k29 rv28)
; env: (count str ch k14 k16 k15 return break k17 i14 k27 continue k26 k25 rv30 k29 rv28)
; regular: rv30
; env: (count str ch k14 k16 k15 return break k17 i14 k27 continue k26 k25 rv30 k29 rv28)
; env: (count str ch k14 k16 k15 return break k17 i14 k27 continue k26 k25 rv30 k29 rv28)
; regular: k29
; env: (count str ch k14 k16 k15 return break k17 i14 k27 continue k26 k25 rv30 k29 rv28)
; env: (count str ch k14 k16 k15 return break k17 i14 k27 continue k26 k25 rv28)
; regular: k27
; env: (count str ch k14 k16 k15 return break k17 i14 k27 continue k26 k25 rv28)
; env: (count str ch k14 k16 k15 return break k17 i14 k27 continue k26 k25 rv28)
; regular: k27
; env: (count str ch k14 k16 k15 return break k17 i14 k27 continue k26 k25 rv28)
; env: (count str ch k14 k16 k15 return break k17 i14 continue k26 k25)
; regular: k26
; env: (count str ch k14 k16 k15 return break k17 i14 k25)
; regular: k25
; env: (count str ch k14 k16 k15 return break k17)
; regular: k17
; env: (count str ch k14 k16 k15 return)
; env*: (count str ch k14 k16 k15 return rv31)
; env: (count str ch k14 k16 k15 return rv31)
; env: (count str ch k14 k16 k15 return rv31)
; env: (count str ch k14 k16 k15 return rv31)
; mutable: count
; env: (count str ch k14 k16 k15 return rv31)
; env: (count str ch k14 k16 k15 return rv31)
; env*: (count str ch k14 k16 k15 return rv31 rv32)
; env: (count str ch k14 k16 k15 return rv31 rv32)
; env: (count str ch k14 k16 k15 return rv31 rv32)
; regular: rv32
; env: (count str ch k14 k16 k15 return rv31 rv32)
; env: (count str ch k14 k16 k15 return rv31 rv32)
; env*: (count str ch k14 k16 k15 return rv31 k33 rv32)
; env: (count str ch k14 k16 k15 return rv31 k33 rv32)
; env: (count str ch k14 k16 k15 return rv31 k33 rv32)
; regular: return
; env: (count str ch k14 k16 k15 return rv31 k33 rv32)
; env: (count str ch k14 k16 k15 return rv31 k33 rv32)
; regular: k33
; env: (count str ch k14 k16 k15 return rv31 rv32)
; regular: k16
; env: (count str ch k14 k16 k15 return rv31 rv32)
; env: (count str ch k14 k16 k15 return rv31 rv32)
; env*: (count str ch k14 k16 k15 return rv31 k34 rv32)
; env: (count str ch k14 k16 k15 return rv31 k34 rv32)
; env: (count str ch k14 k16 k15 return rv31 k34 rv32)
; regular: return
; env: (count str ch k14 k16 k15 return rv31 k34 rv32)
; env: (count str ch k14 k16 k15 return rv31 k34 rv32)
; regular: k34
; env: (count str ch k14 k16 k15 return rv31 rv32)
; regular: k16
; env: (str k14 k15 return)
; env: (str k14 k15 return)
; env: (str k14 k15 return)
; regular: k15
; env: (str k14)
; regular: k14
; env: ()
; env: ()
; env: ()
; global: $halt
; env: ()
(program
 (define break (void))
 (define return (void))
 (define continue (void))
 (define $current-handler (void))
 (define g$two_e (void))
 (set-then!
  g$two_e
  (lambda (str k14)
    ((lambda (f cc) (f (lambda (x k) (cc x)) cc))
     (lambda (return k15)
       ((lambda (count ch k16)
          (set-then!
           count
           (make-cell count)
           (set-then!
            ch
            (make-cell ch)
            (set-cell!
             count
             0
             ((lambda (f cc) (f (lambda (x k) (cc x)) cc))
              (lambda (break k17)
                ((lambda ($seq14 $loop15 k18)
                   ((lambda (k19)
                      ((cps set?)
                       $seq14
                       (lambda (rv21)
                         (if rv21
                           (for-set-k $seq14 $loop15 k19)
                           ((cps tuple?)
                            $seq14
                            (lambda (rv22)
                              (if rv22
                                (for-tuple-k $seq14 $loop15 k19)
                                ((cps py-list?)
                                 $seq14
                                 (lambda (rv23)
                                   (if rv23
                                     (for-py-list-k $seq14 $loop15 k19)
                                     ((cps dict?)
                                      $seq14
                                      (lambda (rv24)
                                        (if rv24
                                          (for-dict-k $seq14 $loop15 k19)
                                          (k19 (void)))))))))))))))
                    (lambda (rv20) (k18 (void)))))
                 str
                 (lambda (i14 k25)
                   ((lambda (f cc) (f (lambda (x k) (cc x)) cc))
                    (lambda (continue k26)
                      (set-cell!
                       ch
                       i14
                       ((lambda (k27)
                          ((cps equal?)
                           (get-cell ch)
                           "e"
                           (lambda (rv28)
                             (if rv28
                               ((lambda (k29)
                                  ((cps +)
                                   (get-cell count)
                                   1
                                   (lambda (rv30)
                                     (set-cell! count rv30 (k29 (void))))))
                                k27)
                               (k27 (void))))))
                        k26)))
                    k25))
                 k17))
              (lambda (rv31)
                ((cps equal?)
                 (get-cell count)
                 2
                 (lambda (rv32)
                   (if rv32
                     ((lambda (k33) (return #t k33)) k16)
                     ((lambda (k34) (return #f k34)) k16))))))))))
        (void)
        (void)
        k15))
     k14))
  ($halt (void))))

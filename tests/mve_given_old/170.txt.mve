; mutable: g$x
; mutable: g$f
; mutable: x
; mutable: g
; env: ()
; env: ()
; env: ()
; env: ()
; env: ()
; env: ()
; env: ()
; env: ()
; env: ()
; env: ()
; env*: (k14)
; env: (k14)
; env: (k14)
; env*: (f k14 cc)
; env: (f k14 cc)
; env: (f k14 cc)
; regular: f
; env: (f k14 cc)
; env*: (f k x k14 cc)
; env: (f k x k14 cc)
; env: (f k x k14 cc)
; regular: cc
; env: (f k x k14 cc)
; mutable: x
; env: (f k14 cc)
; regular: cc
; env: (k14)
; env*: (k14 k15 return)
; env: (k14 k15 return)
; env: (k14 k15 return)
; env*: (g x return k15 k14 k16)
; env: (g x return k15 k14 k16)
; env: (g x return k15 k14 k16)
; env: (g x return k15 k14 k16)
; env: (g x return k15 k14 k16)
; env*: (g x return k15 k14 k17 k16)
; env: (g x return k15 k14 k17 k16)
; env: (g x return k15 k14 k17 k16)
; env*: (f g x cc return k15 k14 k17 k16)
; env: (f g x cc return k15 k14 k17 k16)
; env: (f g x cc return k15 k14 k17 k16)
; regular: f
; env: (f g x cc return k15 k14 k17 k16)
; env*: (f k x g cc return k15 k14 k17 k16)
; env: (f k x g cc return k15 k14 k17 k16)
; env: (f k x g cc return k15 k14 k17 k16)
; regular: cc
; env: (f k x g cc return k15 k14 k17 k16)
; mutable: x
; env: (f g x cc return k15 k14 k17 k16)
; regular: cc
; env: (g x return k15 k14 k17 k16)
; env*: (g x return k15 k14 k18 k17 k16)
; env: (g x return k15 k14 k18 k17 k16)
; env: (g x return k15 k14 k18 k17 k16)
; env*: (g x return k15 k14 k19 k18 k17 k16)
; env: (g x return k15 k14 k19 k18 k17 k16)
; env: (g x return k15 k14 k19 k18 k17 k16)
; env: (g x return k15 k14 k19 k18 k17 k16)
; env: (g x return k15 k14 k19 k18 k17 k16)
; regular: k19
; env: (g x return k15 k14 k19 k18 k17 k16)
; env: (g x return k15 k14 k18 k17 k16)
; regular: k18
; env: (g x return k15 k14 k17 k16)
; regular: k17
; env: (g x return k15 k14 k16)
; env: (g x return k15 k14 k16)
; mutable: g
; env: (g x return k15 k14 k16)
; regular: k16
; env: (k14 k15 return)
; env: (k14 k15 return)
; env: (k14 k15 return)
; regular: k15
; env: (k14)
; regular: k14
; env: ()
; env: ()
; env: ()
; global: g$f
; env: ()
; env*: (rv20)
; env: (rv20)
; env: (rv20)
; env: (rv20)
; env: (rv20)
; global: g$x
; env: (rv20)
; env: (rv20)
; global: $halt
(program
 (define break (void))
 (define return (void))
 (define continue (void))
 (define $current-handler (void))
 (define g$f (void))
 (define g$x (void))
 (set-then!
  g$x
  10
  (set-then!
   g$f
   (lambda (k14)
     ((lambda (f cc)
        (f (lambda (x k) (set-then! x (make-cell x) (cc (get-cell x)))) cc))
      (lambda (return k15)
        ((lambda (x g k16)
           (set-then!
            x
            (make-cell x)
            (set-then!
             g
             (make-cell g)
             (set-cell!
              x
              20
              (set-cell!
               g
               (lambda (k17)
                 ((lambda (f cc)
                    (f
                     (lambda (x k)
                       (set-then! x (make-cell x) (cc (get-cell x))))
                     cc))
                  (lambda (return k18)
                    ((lambda (k19) (set-then! g$x 30 (k19 (void)))) k18))
                  k17))
               ((get-cell g) k16))))))
         (void)
         (void)
         k15))
      k14))
   (g$f (lambda (rv20) ((cps py-print) g$x $halt))))))

; mutable: i
; mutable: result
; mutable: loop
; mutable: g$gamma
; env: ()
; env: ()
; env: ()
; env: ()
; env: ()
; env: ()
; env: ()
; env*: (k14)
; env: (k14)
; env: (k14)
; env*: (f k14 cc)
; env: (f k14 cc)
; env: (f k14 cc)
; regular: f
; env: (f k14 cc)
; env*: (f k x k14 cc)
; env: (f k x k14 cc)
; env: (f k x k14 cc)
; regular: cc
; env: (f k x k14 cc)
; regular: x
; env: (f k14 cc)
; regular: cc
; env: (k14)
; env*: (k14 return k15)
; env: (k14 return k15)
; env: (k14 return k15)
; env*: (i result return k14 k15 k16)
; env: (i result return k14 k15 k16)
; env: (i result return k14 k15 k16)
; env: (i result return k14 k15 k16)
; env: (i result return k14 k15 k16)
; env: (i result return k14 k15 k16)
; env: (i result return k14 k15 k16)
; env*: (f i result cc return k14 k15 k16)
; env: (f i result cc return k14 k15 k16)
; env: (f i result cc return k14 k15 k16)
; regular: f
; env: (f i result cc return k14 k15 k16)
; env*: (f k i result x cc return k14 k15 k16)
; env: (f k i result x cc return k14 k15 k16)
; env: (f k i result x cc return k14 k15 k16)
; regular: cc
; env: (f k i result x cc return k14 k15 k16)
; regular: x
; env: (f i result cc return k14 k15 k16)
; regular: cc
; env: (i result return k14 k15 k16)
; env*: (i result return k14 break k17 k15 k16)
; env: (i result return k14 break k17 k15 k16)
; env: (i result return k14 break k17 k15 k16)
; env*: (loop i result return k14 break k17 k15 k16 k18)
; env: (loop i result return k14 break k17 k15 k16 k18)
; env: (loop i result return k14 break k17 k15 k16 k18)
; env*: (loop i result return k14 break k17 k15 k16 k19 k18)
; env: (loop i result return k14 break k17 k15 k16 k19 k18)
; env: (loop i result return k14 break k17 k15 k16 k19 k18)
; env: (loop i result return k14 break k17 k15 k16 k19 k18)
; mutable: i
; env: (loop i result return k14 break k17 k15 k16 k19 k18)
; env: (loop i result return k14 break k17 k15 k16 k19 k18)
; env*: (loop i result return k14 break k17 k15 k16 rv20 k19 k18)
; env: (loop i result return k14 break k17 k15 k16 rv20 k19 k18)
; env: (loop i result return k14 break k17 k15 k16 rv20 k19 k18)
; regular: rv20
; env: (loop i result return k14 break k17 k15 k16 rv20 k19 k18)
; env: (loop i result return k14 break k17 k15 k16 rv20 k19 k18)
; env*: (f loop i result cc return k14 break k17 k15 k16 rv20 k19 k18)
; env: (f loop i result cc return k14 break k17 k15 k16 rv20 k19 k18)
; env: (f loop i result cc return k14 break k17 k15 k16 rv20 k19 k18)
; regular: f
; env: (f loop i result cc return k14 break k17 k15 k16 rv20 k19 k18)
; env*: (f k loop i result x cc return k14 break k17 k15 k16 rv20 k19 k18)
; env: (f k loop i result x cc return k14 break k17 k15 k16 rv20 k19 k18)
; env: (f k loop i result x cc return k14 break k17 k15 k16 rv20 k19 k18)
; regular: cc
; env: (f k loop i result x cc return k14 break k17 k15 k16 rv20 k19 k18)
; regular: x
; env: (f loop i result cc return k14 break k17 k15 k16 rv20 k19 k18)
; regular: cc
; env: (loop i result return k14 break k17 k15 k16 rv20 k19 k18)
; env*: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 k21)
; env: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 k21)
; env: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 k21)
; env*: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 k22 k21)
; env: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 k22 k21)
; env: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 k22 k21)
; env: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 k22 k21)
; env: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 k22 k21)
; mutable: i
; env: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 k22 k21)
; env*: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 rv23 k22 k21)
; env: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 rv23 k22 k21)
; env: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 rv23 k22 k21)
; env: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 rv23 k22 k21)
; global: get-field
; env: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 rv23 k22 k21)
; env: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 rv23 k22 k21)
; global: g$math
; env: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 rv23 k22 k21)
; env: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 rv23 k22 k21)
; global: log
; env: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 rv23 k22 k21)
; env*: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 rv23 k22 k21 rv24)
; env: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 rv23 k22 k21 rv24)
; env: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 rv23 k22 k21 rv24)
; env: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 rv23 k22 k21 rv24)
; mutable: i
; env: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 rv23 k22 k21 rv24)
; env: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 rv23 k22 k21 rv24)
; env*: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 rv23 k22 k21 rv25 rv24)
; env: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 rv23 k22 k21 rv25 rv24)
; env: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 rv23 k22 k21 rv25 rv24)
; env: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 rv23 k22 k21 rv25 rv24)
; regular: rv25
; env: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 rv23 k22 k21 rv25 rv24)
; mutable: i
; env: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 rv23 k22 k21 rv25 rv24)
; env*: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 rv23 k22 k21 rv26 rv25 rv24)
; env: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 rv23 k22 k21 rv26 rv25 rv24)
; env: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 rv23 k22 k21 rv26 rv25 rv24)
; regular: rv24
; env: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 rv23 k22 k21 rv26 rv25 rv24)
; regular: rv26
; env: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 rv23 k22 k21 rv26 rv25 rv24)
; env*: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 rv23 k22 k21 rv27 rv26 rv25 rv24)
; env: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 rv23 k22 k21 rv27 rv26 rv25 rv24)
; env: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 rv23 k22 k21 rv27 rv26 rv25 rv24)
; env: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 rv23 k22 k21 rv27 rv26 rv25 rv24)
; regular: rv23
; env: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 rv23 k22 k21 rv27 rv26 rv25 rv24)
; regular: rv27
; env: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 rv23 k22 k21 rv27 rv26 rv25 rv24)
; env*: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 rv23 k22 k21 rv27 rv26 rv25 rv24 rv28)
; env: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 rv23 k22 k21 rv27 rv26 rv25 rv24 rv28)
; env: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 rv23 k22 k21 rv27 rv26 rv25 rv24 rv28)
; env: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 rv23 k22 k21 rv27 rv26 rv25 rv24 rv28)
; mutable: result
; env: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 rv23 k22 k21 rv27 rv26 rv25 rv24 rv28)
; regular: rv28
; env: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 rv23 k22 k21 rv27 rv26 rv25 rv24 rv28)
; env*: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 rv23 k22 k21 rv27 rv26 rv25 rv24 rv29 rv28)
; env: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 rv23 k22 k21 rv27 rv26 rv25 rv24 rv29 rv28)
; env: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 rv23 k22 k21 rv27 rv26 rv25 rv24 rv29 rv28)
; regular: rv29
; env: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 rv23 k22 k21 rv27 rv26 rv25 rv24 rv29 rv28)
; env: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 rv23 k22 k21 rv27 rv26 rv25 rv24 rv29 rv28)
; env: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 rv23 k22 k21 rv27 rv26 rv25 rv24 rv29 rv28)
; mutable: i
; env: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 rv23 k22 k21 rv27 rv26 rv25 rv24 rv29 rv28)
; env: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 rv23 k22 k21 rv27 rv26 rv25 rv24 rv29 rv28)
; env*: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 rv23 k22 k21 rv27 rv26 rv25 rv24 rv30 rv29 rv28)
; env: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 rv23 k22 k21 rv27 rv26 rv25 rv24 rv30 rv29 rv28)
; env: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 rv23 k22 k21 rv27 rv26 rv25 rv24 rv30 rv29 rv28)
; regular: rv30
; env: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 rv23 k22 k21 rv27 rv26 rv25 rv24 rv30 rv29 rv28)
; env: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 rv23 k22 k21 rv27 rv26 rv25 rv24 rv30 rv29 rv28)
; regular: k22
; env: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 rv23 k22 k21 rv27 rv26 rv25 rv24 rv30 rv29 rv28)
; env: (loop i result return k14 break k17 k15 k16 continue rv20 k19 k18 k21)
; regular: k21
; env: (loop i result return k14 break k17 k15 k16 rv20 k19 k18)
; env*: (loop i result return k14 break k17 k15 k16 rv20 k19 k18 rv31)
; env: (loop i result return k14 break k17 k15 k16 rv20 k19 k18 rv31)
; env: (loop i result return k14 break k17 k15 k16 rv20 k19 k18 rv31)
; mutable: loop
; env: (loop i result return k14 break k17 k15 k16 rv20 k19 k18 rv31)
; regular: k19
; env: (loop i result return k14 break k17 k15 k16 rv20 k19 k18)
; env: (loop i result return k14 break k17 k15 k16 rv20 k19 k18)
; regular: k19
; env: (loop i result return k14 break k17 k15 k16 rv20 k19 k18)
; env: (loop i result return k14 break k17 k15 k16 k18)
; env: (loop i result return k14 break k17 k15 k16 k18)
; mutable: loop
; env: (loop i result return k14 break k17 k15 k16 k18)
; env*: (loop i result return k14 break k17 k15 k16 k18 rv32)
; env: (loop i result return k14 break k17 k15 k16 k18 rv32)
; env: (loop i result return k14 break k17 k15 k16 k18 rv32)
; regular: k18
; env: (loop i result return k14 break k17 k15 k16 k18 rv32)
; env: (i result return k14 break k17 k15 k16)
; env: (i result return k14 break k17 k15 k16)
; regular: k17
; env: (i result return k14 k15 k16)
; env*: (i result return k14 k15 k16 rv33)
; env: (i result return k14 k15 k16 rv33)
; env: (i result return k14 k15 k16 rv33)
; regular: return
; env: (i result return k14 k15 k16 rv33)
; mutable: result
; env: (i result return k14 k15 k16 rv33)
; regular: k16
; env: (k14 return k15)
; env: (k14 return k15)
; env: (k14 return k15)
; regular: k15
; env: (k14)
; regular: k14
; env: ()
; env: ()
; env: ()
; global: $halt
; env: ()
(program
 (define break (void))
 (define return (void))
 (define continue (void))
 (define $current-handler (void))
 (define g$gamma (void))
 (set-then!
  g$gamma
  (lambda (k14)
    ((lambda (f cc) (f (lambda (x k) (cc x)) cc))
     (lambda (return k15)
       ((lambda (result i k16)
          (set-then!
           result
           (make-cell result)
           (set-then!
            i
            (make-cell i)
            (set-cell!
             result
             0.0
             (set-cell!
              i
              1
              ((lambda (f cc) (f (lambda (x k) (cc x)) cc))
               (lambda (break k17)
                 ((lambda (loop k18)
                    (set-then!
                     loop
                     (make-cell loop)
                     (set-cell!
                      loop
                      (lambda (k19)
                        ((cps <=)
                         (get-cell i)
                         500000
                         (lambda (rv20)
                           (if rv20
                             ((lambda (f cc) (f (lambda (x k) (cc x)) cc))
                              (lambda (continue k21)
                                ((lambda (k22)
                                   ((cps /)
                                    1.0
                                    (get-cell i)
                                    (lambda (rv23)
                                      (get-field
                                       g$math
                                       log
                                       (lambda (rv24)
                                         ((cps +)
                                          (get-cell i)
                                          1.0
                                          (lambda (rv25)
                                            ((cps /)
                                             rv25
                                             (get-cell i)
                                             (lambda (rv26)
                                               (rv24
                                                rv26
                                                (lambda (rv27)
                                                  ((cps -)
                                                   rv23
                                                   rv27
                                                   (lambda (rv28)
                                                     ((cps +)
                                                      (get-cell result)
                                                      rv28
                                                      (lambda (rv29)
                                                        (set-cell!
                                                         result
                                                         rv29
                                                         ((cps +)
                                                          (get-cell i)
                                                          1
                                                          (lambda (rv30)
                                                            (set-cell!
                                                             i
                                                             rv30
                                                             (k22
                                                              (void)))))))))))))))))))))
                                 k21))
                              (lambda (rv31) ((get-cell loop) k19)))
                             (k19 (void))))))
                      ((get-cell loop) (lambda (rv32) (k18 (void)))))))
                  (void)
                  k17))
               (lambda (rv33) (return (get-cell result) k16))))))))
        (void)
        (void)
        k15))
     k14))
  ($halt (void))))

; mutable: g$count
; mutable: loop
; env: ()
; env: ()
; env: ()
; env: ()
; env: ()
; env: ()
; env: ()
; env: ()
; env: ()
; env*: (f cc)
; env: (f cc)
; env: (f cc)
; regular: f
; env: (f cc)
; env*: (f k cc x)
; env: (f k cc x)
; env: (f k cc x)
; regular: cc
; env: (f k cc x)
; regular: x
; env: (f cc)
; regular: cc
; env: ()
; env*: (k14 break)
; env: (k14 break)
; env: (k14 break)
; env*: (loop break k14 k15)
; env: (loop break k14 k15)
; env: (loop break k14 k15)
; env*: (loop k16 break k14 k15)
; env: (loop k16 break k14 k15)
; env: (loop k16 break k14 k15)
; env: (loop k16 break k14 k15)
; env: (loop k16 break k14 k15)
; env*: (f cc loop k16 break k14 k15)
; env: (f cc loop k16 break k14 k15)
; env: (f cc loop k16 break k14 k15)
; regular: f
; env: (f cc loop k16 break k14 k15)
; env*: (f k x cc loop k16 break k14 k15)
; env: (f k x cc loop k16 break k14 k15)
; env: (f k x cc loop k16 break k14 k15)
; regular: cc
; env: (f k x cc loop k16 break k14 k15)
; regular: x
; env: (f cc loop k16 break k14 k15)
; regular: cc
; env: (loop k16 break k14 k15)
; env*: (loop k16 break k14 k15 continue k17)
; env: (loop k16 break k14 k15 continue k17)
; env: (loop k16 break k14 k15 continue k17)
; env*: (loop k16 break k14 k15 k18 continue k17)
; env: (loop k16 break k14 k15 k18 continue k17)
; env: (loop k16 break k14 k15 k18 continue k17)
; env: (loop k16 break k14 k15 k18 continue k17)
; env: (loop k16 break k14 k15 k18 continue k17)
; global: g$count
; env: (loop k16 break k14 k15 k18 continue k17)
; env: (loop k16 break k14 k15 k18 continue k17)
; env*: (loop k16 break k14 k15 rv19 k18 continue k17)
; env: (loop k16 break k14 k15 rv19 k18 continue k17)
; env: (loop k16 break k14 k15 rv19 k18 continue k17)
; regular: rv19
; env: (loop k16 break k14 k15 rv19 k18 continue k17)
; env: (loop k16 break k14 k15 rv19 k18 continue k17)
; env*: (loop k16 break k14 k15 rv19 k18 continue k17 k20)
; env: (loop k16 break k14 k15 rv19 k18 continue k17 k20)
; env: (loop k16 break k14 k15 rv19 k18 continue k17 k20)
; env: (loop k16 break k14 k15 rv19 k18 continue k17 k20)
; env: (loop k16 break k14 k15 rv19 k18 continue k17 k20)
; global: g$count
; env: (loop k16 break k14 k15 rv19 k18 continue k17 k20)
; env: (loop k16 break k14 k15 rv19 k18 continue k17 k20)
; env*: (loop k16 break k14 k15 rv19 k18 continue k17 rv26 k20)
; env: (loop k16 break k14 k15 rv19 k18 continue k17 rv26 k20)
; env: (loop k16 break k14 k15 rv19 k18 continue k17 rv26 k20)
; regular: rv26
; env: (loop k16 break k14 k15 rv19 k18 continue k17 rv26 k20)
; env: (loop k16 break k14 k15 rv19 k18 continue k17 rv26 k20)
; env*: (loop k16 break k14 k15 rv19 k18 continue k17 k27 rv26 k20)
; env: (loop k16 break k14 k15 rv19 k18 continue k17 k27 rv26 k20)
; env: (loop k16 break k14 k15 rv19 k18 continue k17 k27 rv26 k20)
; regular: break
; env: (loop k16 break k14 k15 rv19 k18 continue k17 k27 rv26 k20)
; regular: k27
; env: (loop k16 break k14 k15 rv19 k18 continue k17 rv26 k20)
; regular: k20
; env: (loop k16 break k14 k15 rv19 k18 continue k17 rv26 k20)
; env: (loop k16 break k14 k15 rv19 k18 continue k17 rv26 k20)
; regular: k20
; env: (loop k16 break k14 k15 rv19 k18 continue k17 rv26 k20)
; env: (loop k16 break k14 k15 rv19 k18 continue k17)
; env*: (loop k16 break k14 k15 rv19 k18 continue k17 rv21)
; env: (loop k16 break k14 k15 rv19 k18 continue k17 rv21)
; env: (loop k16 break k14 k15 rv19 k18 continue k17 rv21)
; env*: (loop k16 break k14 k15 rv19 k18 continue k17 rv21 k22)
; env: (loop k16 break k14 k15 rv19 k18 continue k17 rv21 k22)
; env: (loop k16 break k14 k15 rv19 k18 continue k17 rv21 k22)
; env: (loop k16 break k14 k15 rv19 k18 continue k17 rv21 k22)
; env: (loop k16 break k14 k15 rv19 k18 continue k17 rv21 k22)
; global: g$count
; env: (loop k16 break k14 k15 rv19 k18 continue k17 rv21 k22)
; env: (loop k16 break k14 k15 rv19 k18 continue k17 rv21 k22)
; env*: (loop k16 break k14 k15 rv19 k18 continue k17 rv21 rv24 k22)
; env: (loop k16 break k14 k15 rv19 k18 continue k17 rv21 rv24 k22)
; env: (loop k16 break k14 k15 rv19 k18 continue k17 rv21 rv24 k22)
; regular: rv24
; env: (loop k16 break k14 k15 rv19 k18 continue k17 rv21 rv24 k22)
; env: (loop k16 break k14 k15 rv19 k18 continue k17 rv21 rv24 k22)
; env*: (loop k16 break k14 k15 rv19 k18 continue k17 rv21 k25 rv24 k22)
; env: (loop k16 break k14 k15 rv19 k18 continue k17 rv21 k25 rv24 k22)
; env: (loop k16 break k14 k15 rv19 k18 continue k17 rv21 k25 rv24 k22)
; regular: continue
; env: (loop k16 break k14 k15 rv19 k18 continue k17 rv21 k25 rv24 k22)
; regular: k25
; env: (loop k16 break k14 k15 rv19 k18 continue k17 rv21 rv24 k22)
; regular: k22
; env: (loop k16 break k14 k15 rv19 k18 continue k17 rv21 rv24 k22)
; env: (loop k16 break k14 k15 rv19 k18 continue k17 rv21 rv24 k22)
; regular: k22
; env: (loop k16 break k14 k15 rv19 k18 continue k17 rv21 rv24 k22)
; env: (loop k16 break k14 k15 rv19 k18 continue k17 rv21)
; env*: (loop k16 break k14 k15 rv19 k18 continue k17 rv21 rv23)
; env: (loop k16 break k14 k15 rv19 k18 continue k17 rv21 rv23)
; env: (loop k16 break k14 k15 rv19 k18 continue k17 rv21 rv23)
; env: (loop k16 break k14 k15 rv19 k18 continue k17 rv21 rv23)
; env: (loop k16 break k14 k15 rv19 k18 continue k17 rv21 rv23)
; global: g$count
; env: (loop k16 break k14 k15 rv19 k18 continue k17 rv21 rv23)
; regular: k18
; env: (loop k16 break k14 k15 continue k17)
; regular: k17
; env: (loop k16 break k14 k15)
; env*: (loop k16 break k14 k15 rv28)
; env: (loop k16 break k14 k15 rv28)
; env: (loop k16 break k14 k15 rv28)
; mutable: loop
; env: (loop k16 break k14 k15 rv28)
; regular: k16
; env: (loop k16 break k14 k15)
; env: (loop k16 break k14 k15)
; regular: k16
; env: (loop k16 break k14 k15)
; env: (loop break k14 k15)
; env: (loop break k14 k15)
; mutable: loop
; env: (loop break k14 k15)
; env*: (loop break k14 k15 rv29)
; env: (loop break k14 k15 rv29)
; env: (loop break k14 k15 rv29)
; regular: k15
; env: (loop break k14 k15 rv29)
; env: (k14 break)
; env: (k14 break)
; regular: k14
; env: ()
; env: ()
; global: $halt
(program
 (define break (void))
 (define return (void))
 (define continue (void))
 (define $current-handler (void))
 (define g$count (void))
 (set-then!
  g$count
  0
  ((lambda (f cc) (f (lambda (x k) (cc x)) cc))
   (lambda (break k14)
     ((lambda (loop k15)
        (set-then!
         loop
         (make-cell loop)
         (set-cell!
          loop
          (lambda (k16)
            (if #t
              ((lambda (f cc) (f (lambda (x k) (cc x)) cc))
               (lambda (continue k17)
                 ((lambda (k18)
                    ((cps +)
                     g$count
                     1
                     (lambda (rv19)
                       (set-then!
                        g$count
                        rv19
                        ((lambda (k20)
                           ((cps >)
                            g$count
                            10
                            (lambda (rv26)
                              (if rv26
                                ((lambda (k27) (break k27)) k20)
                                (k20 (void))))))
                         (lambda (rv21)
                           ((lambda (k22)
                              ((cps equal?)
                               g$count
                               5
                               (lambda (rv24)
                                 (if rv24
                                   ((lambda (k25) (continue k25)) k22)
                                   (k22 (void))))))
                            (lambda (rv23) ((cps py-print) g$count k18)))))))))
                  k17))
               (lambda (rv28) ((get-cell loop) k16)))
              (k16 (void))))
          ((get-cell loop) (lambda (rv29) (k15 (void)))))))
      (void)
      k14))
   $halt)))

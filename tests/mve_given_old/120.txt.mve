; mutable: g$f
; env: ()
; env: ()
; env: ()
; env: ()
; env: ()
; env: ()
; env: ()
; env*: (k14 x)
; env: (k14 x)
; env: (k14 x)
; env*: (f x k14 cc)
; env: (f x k14 cc)
; env: (f x k14 cc)
; regular: f
; env: (f x k14 cc)
; env*: (f k x k14 cc)
; env: (f k x k14 cc)
; env: (f k x k14 cc)
; regular: cc
; env: (f k x k14 cc)
; regular: x
; env: (f x k14 cc)
; regular: cc
; env: (k14 x)
; env*: (x k14 k15 return)
; env: (x k14 k15 return)
; env: (x k14 k15 return)
; regular: return
; env: (x k14 k15 return)
; regular: x
; env: (x k14 k15 return)
; regular: k15
; env: (k14 x)
; regular: k14
; env: ()
; env: ()
; env: ()
; global: g$f
; env: ()
; env: ()
; env*: (rv16)
; env: (rv16)
; env: (rv16)
; env: (rv16)
; regular: rv16
; env: (rv16)
; env: (rv16)
; global: $halt
(program
 (define break (void))
 (define return (void))
 (define continue (void))
 (define $current-handler (void))
 (define g$f (void))
 (set-then!
  g$f
  (lambda (x k14)
    ((lambda (f cc) (f (lambda (x k) (cc x)) cc))
     (lambda (return k15) (return x k15))
     k14))
  (g$f 3 (lambda (rv16) ((cps py-print) rv16 $halt)))))
